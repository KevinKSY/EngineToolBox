 [filename,~,filterIndex ]  = uigetfile('*.sae');

if filterIndex == 1
    open(filename);
    startRow = input('Line number where the data starts [4] : ');
    if isempty(startRow)
        startRow = 4;
    end;
    
%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\DBox\Dropbox\Study\ModelLibrary\Code\Matlab\Turbocharger\TPL
%    Compressor.sae
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/10/21 16:07:17

    
    endRow = inf;

%% Read columns of data as strings:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%10s%10s%10s%10s%[^\n\r]';

%% Open the text file.
    fileID = fopen(filename,'r');

%% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end

%% Close the text file.
    fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
    % Replace non-numeric strings with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = dataArray{col};
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));

    for col=[1,2,3,4]
        % Converts strings in the input cell array to numbers. Replaced non-numeric
        % strings with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1);
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData{row}, regexstr, 'names');
                numbers = result.numbers;

                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if any(numbers==',');
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(thousandsRegExp, ',', 'once'));
                        numbers = NaN;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric strings to numbers.
                if ~invalidThousandsSeparator;
                    numbers = textscan(strrep(numbers, ',', ''), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch me
            end
        end
    end


%% Replace non-numeric cells with NaN
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
    raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
    RPMComp = cell2mat(raw(:, 1));
    QComp = cell2mat(raw(:, 2));
    PRComp = cell2mat(raw(:, 3));
    effComp = cell2mat(raw(:, 4));

    idx = find(isnan(RPMComp));
    SAECompMap.RPM = RPMComp(idx1+1:idx(1)-1);
    SAECompMap.PR = PRComp(1:idx(1)-1);
    SAECompMap.m_dot = QComp(1:idx(1)-1);
    SAECompMap.eff = effComp(1:idx(1)-1);

    SAECompMap.RPM_surge = RPMComp(idx(end)+1:end);
    SAECompMap.PR_surge = PRComp(idx(end)+1:end);
    SAECompMap.m_dot_surge = QComp(idx(end)+1:end);

    SAECompMap.modelName = input('What is the model name?','s');
    SAECompMap.typee = input('What is the type (radial, axial,etc)?','s');
    SAECompMap.inertia = input('Mass momentum of inertia? [kgm2]');
end;

clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;
clearvars PRComp QComp RPMComp block effComp endRow filterIndex idx startRow

